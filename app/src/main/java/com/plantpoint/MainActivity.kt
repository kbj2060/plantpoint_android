package com.example.plantpointimport android.content.Contextimport android.os.Bundleimport android.util.Logimport android.view.inputmethod.InputMethodManagerimport androidx.appcompat.app.AppCompatActivityimport androidx.navigation.fragment.findNavControllerimport androidx.navigation.ui.setupWithNavControllerimport com.google.android.material.bottomnavigation.BottomNavigationViewimport com.google.firebase.auth.FirebaseAuthimport com.google.firebase.auth.FirebaseUserimport com.google.firebase.firestore.FirebaseFirestoreclass MainActivity : AppCompatActivity() {    var neighborScrollIndex: Int? = 0    private var user:FirebaseUser? = FirebaseAuth.getInstance().currentUser    public var me : Map<String, Any> = mutableMapOf()    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)        setContentView(R.layout.activity_main)        if(user != null){            updateMe()        }        val navView: BottomNavigationView = findViewById(R.id.nav_view)        val navHostFragment = supportFragmentManager.findFragmentById(R.id.nav_host_fragment)        val navController = navHostFragment!!.findNavController()        navController.setGraph(R.navigation.mobile_navigation)        navView.setupWithNavController(navController)        supportActionBar?.hide()    }    override fun onStop(){        super.onStop()        me = mutableMapOf()    }    override fun onRestart() {        super.onRestart()        if(user != null){            updateMe()        }    }    fun changeNeighborScrollIndex(index: Int){        neighborScrollIndex = index    }    fun closeKeyboard() {        val view = this.currentFocus        if(view != null) {            val inputMethodManager = getSystemService(Context.INPUT_METHOD_SERVICE) as InputMethodManager            inputMethodManager.hideSoftInputFromWindow(view.windowToken, 0)        }    }    private fun updateMe() {        FirebaseFirestore            .getInstance()            .collection("user")            .whereEqualTo("uid", user!!.uid)            .get()            .addOnSuccessListener { documents ->                for (document in documents) {                    Log.d("dd", "me update")                    me = document.data                }            }            .addOnFailureListener { exception ->                Log.w("TAG", "Error getting documents: ", exception)            }    }}