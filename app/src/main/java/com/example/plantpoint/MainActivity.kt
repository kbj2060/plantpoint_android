package com.example.plantpointimport android.os.Bundleimport android.util.Logimport androidx.appcompat.app.AppCompatActivityimport androidx.core.os.bundleOfimport androidx.navigation.fragment.findNavControllerimport androidx.navigation.ui.setupWithNavControllerimport com.example.plantpoint.DTO.Userimport com.google.android.material.bottomnavigation.BottomNavigationViewimport com.google.firebase.auth.FirebaseAuthimport com.google.firebase.auth.ktx.authimport com.google.firebase.firestore.FirebaseFirestoreimport com.google.firebase.firestore.Queryimport com.google.firebase.ktx.Firebaseclass MainActivity : AppCompatActivity() {    public var neighborScrollIndex: Int? = 0    val user = FirebaseAuth.getInstance().currentUser    private var me : Map<String, Any> = mutableMapOf()    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)        setContentView(R.layout.activity_main)        supportActionBar?.hide()        val navView: BottomNavigationView = findViewById(R.id.nav_view)        val navHostFragment = supportFragmentManager.findFragmentById(R.id.nav_host_fragment)        val navController = navHostFragment!!.findNavController()        navController.setGraph(R.navigation.mobile_navigation)        navView.setupWithNavController(navController)    }    public fun changeNeighborScrollIndex(index: Int){        neighborScrollIndex = index    }    override fun onResume() {        super.onResume()        updateMe()    }    private fun updateMe () {        FirebaseFirestore            .getInstance()            .collection("user")            .whereEqualTo("uid", user!!.uid)            .get()            .addOnSuccessListener { documents ->                for (document in documents) {                    me = document.data                }            }            .addOnFailureListener { exception ->                Log.w("TAG", "Error getting documents: ", exception)            }    }    public fun getMe(): Map<String, Any> {        return me    }/*    public fun getMyName() {        return me.name    }*/    /*override fun onRestart() {        super.onRestart()        finish();        startActivity(intent);    }*/    /*fun refreshFragment(fragment: Fragment, activity : FragmentActivity) {        val ft: FragmentTransaction = activity.supportFragmentManager.beginTransaction();        ft.detach(fragment).attach(fragment).commit()    }*//*    @SuppressLint("ResourceType")    override fun onResume() {        super.onResume()        val chatFragment: Fragment? = this.supportFragmentManager.findFragmentById(R.layout.fragment_chat)        refreshFragment(chatFragment!!, this)    }    fun refreshFragment(fragment: Fragment, activity : FragmentActivity) {        val ft: FragmentTransaction = activity.supportFragmentManager.beginTransaction();        ft.detach(fragment).attach(fragment).commit()    }*//*    protected override fun onSaveInstanceState(outState: Bundle) {        super.onSaveInstanceState(outState)        val navHostFragment: Fragment? = supportFragmentManager.findFragmentById(R.id.nav_host_fragment)        val previousFragment = navHostFragment!!.childFragmentManager.fragments[0]        //supportFragmentManager.putFragment(outState, "previousFragment", previousFragment)    }*//*    public override fun onStart() {        super.onStart()        val currentUser = auth.currentUser        updateUI(currentUser)    }*/    /*public fun userCheck(user: FirebaseUser?) {        if (user == null) {            Intent(this, LoginActivity::class.java).also {                startActivity(it)            }        }    }*/}